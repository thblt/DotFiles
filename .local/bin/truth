#!/usr/bin/env python3

from sys import argv, stderr, stdout
from os.path import split as path_split

def error(msg, *variables):
	stderr.write(msg.format(*variables) + "\n")

def simplify(expr):
	expr = expr.strip()
	if expr.startswith("lambda"):
		return expr[expr.index(":")+1:].strip()
	return expr
		
	
def truthSymbol(v):
	return "T" if v else "F"

def printCol(values, widths):
	count = len(values)
	for i in range(0,count):
		stdout.write("| {0}{1} ".format(values[i], " "*(widths[i]-len(values[i]))))
	stdout.write("|\n")
		
def printSep(widths):
	print("+" + "+".join(["-"*(x+2) for x in widths]) + "+")
	
if len(argv) == 1:
	error("Usage: {0} lambda [lambda...]\n(where lambda is a valid Python lambda function.)", path_split(argv[0])[1])
	exit(-1)
	
for l in argv[1:]:
	failed = False
	try:
		lf = eval(l)
	except Exception as e:
		error("Parsing \"{0}\" raised exception: {1}.", l, e)
		continue
	if not callable(lf):
		error("{0} does not evaluate to a function.", l)
		continue
	argc = lf.__code__.co_argcount
	if (argc == 0):
		error("{0} takes no argument.", l);
		continue
	argn = lf.__code__.co_varnames
	table = list()
	for i in range(0, 2**argc): # Line of truth-table
		args  = list()
		for j in range(argc-1, -1, -1): # jth argument
			# arguments = i to binary
			if i >= 2**j:
				i -= 2**j
				args.append(True)
			else:
				args.append(False)
		try:
			args.append(lf(*args))
		except Exception as e:
			error("Evaluating {0} with {1} raised exception: {2}.", l, args, e)
			failed = True
			break
		table.append(args)

	if failed:
		continue
	
	l = simplify(l)
	widths = list(map(len, argn)) + [len(l)]
	printSep(widths)
	printCol(list(argn) + [l], widths)
	printSep(widths)
	for row in table:
		printCol([truthSymbol(x) for x in row], widths)
	printSep(widths)
	print()
			
	
	
