#!/usr/bin/env python3

import sys, os, re, subprocess

hexre = re.compile("([a-fA-F0-9]+)$")
def hashdir(path, data):
	if not os.path.isdir(path):
		print("Not a directory: {0}".format(path))
	for file in os.listdir(path):
		canonical = os.path.join(path, file)
		if os.path.isdir(canonical):
			hashdir(os.path.join(path, canonical), data)
		else:
			try:
				out=subprocess.Popen(["openssl", "sha", "-sha1", "-hex", canonical],stdout=subprocess.PIPE)
				(sout,serr)=out.communicate()
				sout = sout.decode('utf-8')
				hash = int(hexre.findall(sout)[-1], 16)
				if not hash in data:
					data[hash] = set()
				data[hash].add(canonical)
			except Exception as e:
				print("Can't compute hash for {0}:\t{1}".format(canonical, e))

hashes = dict() # Hashes are too big for ints.

for dir in [os.path.abspath(x) for x in sys.argv[1:]]:
	hashdir(dir, hashes)

for hash, paths in hashes.items():
	if len(paths) > 1:
		print("\n".join(paths))
		print()
