#!/usr/bin/env python
# -*- coding: utf-8 -*-

# whatever-make
# -------------
# Starts from pwd() to / and tries to find, by order of descending priority:

# - A directory with a CMakeLists.txt and a child directory “build”
#   If found, cd build && make.
# - A directory with a Makefile.
#   If found, cd && make.
#
# TODO: May some day handle scons, setup.py, cabal...


from fnmatch import filter
from multiprocessing import cpu_count
from os import execlp, getcwd, listdir
from os.path import isfile, join as pj, split as path_split
from sys import argv

path = getcwd() if len(argv)==1 else argv[1]

templates = {
    "CmakeLists.txt": ["make", "-C", "{path}/build", "-j{cpucount}"],
    "stack.yaml": ["stack", "build"]
}

def log(msg):
    print("wmake: "+msg)

def has(path, glob):
    candidates = filter(listdir(path), glob)
    if len(candidates) > 0:
        log("Found {0} in {1}.".format(", ".join(candidates), path))
        return True
    return False

def run(*command):
    log("Running: {0}".format(" ".join(command)))
    log("Bye!")
    execlp(command[0], *command)

cpus = str(cpu_count())

while path:

    if has(path, "CMakeLists.txt"):
        run("make", "-C", pj(path, "build"), "-j"+cpus)

    if has(path, "Makefile"):
        run("make", "-C", pj(path, "build"), "-j"+cpus)

    if has(path, "stack.yaml"):
        run("stack", "build")

    if has(path, "*.cabal"):
        run("cabal", "build")

    path, remainder = path_split(path)

    if path=="/": break

print("Nothing found !")
exit(-1)
